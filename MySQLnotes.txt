GETTING STARTED:
	-What's a Database:		1) A Collection of Data
					2) Has methods for manipulations

	-Database Management System:	-Acronyms: DBMS, RDMS
					-Code talks to DBMS, DMS talks to Database
					-DMSs: MySQL, PostgreSQL, etc...

	-MySQL vs SQL:			- SQL is language to "talk" to our database
					- MySQL is a database management system: It uses SQL
					  the language, like many other DBMSs do.
					- What makes DBMSs different, are the features they
					  provide: like security, download speed, etc...
	
	-goormIDE:			-used so we don't have to install.
					-to start server: 	$ mysql-ctl start
					-to stop server:		$ mysql-ctl stop
					-MySQL shell:		$ mysql-ctl cli
					-Exit MySQL shell:	$ exit or ^C
					-CLI Commands:
						* create database <name>;
						* use <name>;
						* source <query.sql> (to run SQL code by filename);
						* desc <tablename>;

CREATING DATABASES AND TABLES:
	-Creating Databases		=You can have multiple databases inside one database server
					-We need to creat individual databases to wall off communication among them:
					-Show Databases:		$ show databases;
					-Create Databases:		$ CREATE DATABASE <name>; (no naming convs; just be consistent)
					-People CAPITALIZE sql stuff and LOWERCASE variables/expressions (for convention)

	-Dropping Databases		-Delete Database:		$ DROP DATABASE <name>;

	-Using Databases		-Tell  MySQL what		
					 database we want		$ USE <database-name>;
					 to work with:

					-Find out the currently		$ SELECT database(); (NULL means not currently using any)
					 used database:

	-Intro to Tables:		-A database is just a bunch of tables (in relational database, at least)
	 ("the hear of SQL")		-Tables hold the data ("a collection of related data held in a structured format within a DB")
					-Terminology:
						* Columns (headers): Ex - Name | Breed | Age
						* Rows (the actual data): blue | Yorkie| 2

					-The Basic Datatypes:
						*Dataypes are important to avoid inconsistent data Ex:(Age: 1, 3, ten)
						*MySQL enforces Datatypes when making tables
						*Numeric Types:			String Type:			Date Types:
							** INT				** CHAR				** DATE
							** SMALLINT			** VARCHAR			** DATETIME
							** TINYINT			** BINARY			** TIMESTAMP
							** MEDIUMINT			** VARBINARY			** TIME
							** BIGINT			** BLOB				** YEAR
							** DECIMAL			** TINYBLOB
							** NUMERIC			** MEDIUMBLOB
							** FLOAT			** LONGBLOB
							** DOUBLE			** TEXT
							** BIT				** TINYTEXT
											** MEDIUMTEXT
											** LONGTEXT
											** ENUM
						*We'll work with INT(whole number) for numbers and VARCHAR(variable-length) for strings
						 where CHAR is a fixed length where everything in that column has to be the same length
						 but VARCHAR let's us have variation between 1 and 255 characters
						* Syntax:
							** varchar(100): where 100 is the specified maximum length
							** int
					- HOW TO ACTUALLY CREATE TABLES:
						* CREATE TABLE tablename
							(
								column_name data_type,
								column_name data_type
							);
							**EX: CREATE TABLE cats
								(
									name VARCHAR(100),
									age INT
								);

					- Show Tables in a DB: 		$ SHOW TABLES;

					- Show Columns of a
					  a Table:			$ SHOW COLUMNS FROM <tablename>; or DESC <tablename>;

					- Deleting Tables:		$ DROP TABLE <tablename>;

INSERTING DATA (and others):
	-Inserting Data:			-Syntax:			(Order matters here for args)
								$ INSERT INTO <table-name>( someColName1, someColName2, ...)
						  		VALUES (valForSomeColName1, valForSomeColName2, ...);
					
					-We can
					 insert multiple		$...
					 values by comma		VALUES (valForSomeColName1, valForSomeColName2, ...),
					 separating rows		       (valForSomeColName1, valForSomeColName2, ...),
					 after VALUES:		       (valForSomeColName1, valForSomeColName2, ...);

	-To View all of our		-Syntax:		$ SELECT * FROM <table-name>;
	 data in a given table:		
	
	-MySQL Warnings:		-Syntax:		$ SHOW WARNINGS;
					-We saw errors where long strings were cut off. And a string value fed to an INT was replaced by a default 0.

	-NULL and NOT_NULL:		-NULL is a default header for a column when you CREATE a table
					-YES value on a NULL means that it permits the column value to be NULL
					-To change values to NOT NULL during creation we do:
						$CREATE TABLE <table-name> (
							colName valType NOT NULL,
							colName valType NOT NULL,
							...
						 )
						*IF you try to insert a NULL into a cell that can't be NULL, it uses its default value.

	-Setting Default Values:	-A default value is a fallback if we get warnings.
					-To set default values during creation we do:
						$CREATE TABLE <table-name>(
							colName valType DEFAULT 'someValidType',
							colName valType DEFAULT someValidType,
							...
						 )
					-You can put NOT NULL before the DEFAULT to mix.

	-A Primer on Primary Keys:	-A PRIMARY KEY IS A UNIQUE IDENTIFIER
					-To specify a primary key during creation:
						$CREATE TABLE <table-name>(
							cat_id INT NOT NULL AUTO INCREMENT, //Part of the example
							colName valType NOT NULL,
							colName valType NOT NULL,
							PRIMARY KEY (cat_id)	//Says "by the way that cat_id I mentioned earlier, is the primary key"
						 )
						*AUTO INCREMENT makes It so when we insert. We don't have to specify the cat_id with a value.
						 SQL will jus keep incrementing it after every insertion, which ensures it'll be unique.
						*PRIMARY KEY can also be placed beside AUTO INCREMENT.

CRUD commands (CreateReadUpdateDelete):
	-READ(SELECT):			-Syntax:		$SELECT * FROM cats; 		//The (*) means "Give me all columns"
								$SELECT colName FROM cats; 	//To show a specific column
								$SELECT col1, col2 FROM cats;	//To show more than 1 column

	-WHERE (to get speciific):	-Syntax:		$SELECT * FROM cats WHERE age=4	//for strings quality is case insensitive	
												//can be something like colName = colName to compare

	-ALIASES:			-Syntax:		$SELECT cat_id AS id FROM cats	//Gives the column name an alias (useful for joining tables)

	-UPDATE(alter existing data):	-Syntax:		$UPDATE cats SET breed='Shorthair'
								 WHERE breed='Tabby';		//IT'S A GOOD IDEA TO TEST A WHERE BEFORE YOU ACTUALLY UPDATE!NO UNDOS!!!!!

	-DELETE:			-Syntax:		$DELETE FROM cats WHERE name='Egg' //Very similar to select
								$DELETE FROM <table-name>	//Deletes everything from the table not the table itself

The World of String Functions:
	-CONCAT() (Combine Data		-Situation:		You separate a full name into first & last names, but then you want to CONCAT it to a full name.
	 For Cleaner Output) :		-Syntax:		$CONCAT( col, anotherCol, etcCol...)
					-IMPORTANT		* Has to be called within a SELECT	(Ex: SELECT CONCAT('Hello', ' ', 'World') )
								* Use FROM to reference tables		(EX: SELECT CONCAT(col1, col2) FROM someTable;
								* $CONCAT_WS (separator, col1, col2, ...)	adds a separator between each concatanation.

	-SUBSTRING() (Work w/		-Syntax:		$SELECT SUBSTRING(someString, 1, 4);	//MYSQL INDICES START AT ONE!!!!!!!!!!!!!
	 parts of strings) :					*If you only specify one index then it goes from that index to the end of the string.
								*Negative numbers are possible. They start from the end of the string.
					-IMPORTANT:		* Used with tables maybe like so:
								$SELECT SUBSTRING(colName, 1, 10) AS 'short title' FROM tableName;
								* You can mix SUBSTRING w/ CONCAT

	-REPLACE() (replace		-Syntax:		$SELECT REPLACE('Hello World', 'Hell', '****')
	 parts of a string):					*arg)1: string in question	 arg2): what we ant to replace arg3): the thing we'll use to replace
					-IMPORTANT:		* It's case sensitive (ex: o doesn't replace O)
								* Again, for tables you can do FROM
								* Also mixable w/ other string functions

	-REVERSE()			-Syntax:		$SELECT REVERSE('HELLO WORLD')	// FROM to reference table
	 (reverses a string):

	-CHAR_LENGTH()			-Syntax:		$SELECT CHAR_LENGTH('HELLO WORLD') //FROM to reference table
	 (counts chars in string):

	-UPPER() & LOWER()		-Syntax:		$SELECT UPPER('Hello World')	//FROM; LOWER is used used the exact way
	(change a strings case)


Refining Our Selections:
	-Using DISTINCT:		-Syntax:		$SELECT DISTINCT some_col_name FROM some_table;
					-IMPORTANT:		* We use DISTINCT in conjunction with SELECT
								* It gets non-dupicate entries
								* When you specify more than one column. It runs distinct on those columns as a row (every entry must be distinct to another)

	-Sorting Data w/		-Syntax:		$SELECT some_col_name FROM some_table ORDER BY some_col_name;
	 ORDER BY:						$SELECT some_col_name_1, some_col_name_2, some_col_name_3 FROM some_table ORDER BY 2; 
									//Where 2 refers to some_col_name_2 the order of what we selected

					-IMPORTANT:		*For alphabetical (ascending) - just specify the some-col-name
								*For alphabetical (descending) - add DESC to ascending
								*Also works for Numbers
								*You can ORDER BY more than 1 column. Ex: ORDER BY lname, fname; This means after we do our initial sorting
								 We can sort by fname if there are any conflicts such as people having the same last name so we have to sort
								 their first names








